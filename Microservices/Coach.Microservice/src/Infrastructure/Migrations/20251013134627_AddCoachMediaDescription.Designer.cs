// <auto-generated />
using System;
using Domain.Persistence;
using Domain.Persistence.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FitverseCoachDbContext))]
    [Migration("20251013134627_AddCoachMediaDescription")]
    partial class AddCoachMediaDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "kyc_status_enum", new[] { "approved", "pending", "rejected" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "media_type_enum", new[] { "document", "image", "video" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "kyc_status_enum", new[] { "pending", "approved", "rejected" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "media_type_enum", new[] { "image", "video", "document" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoachSport", b =>
                {
                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid")
                        .HasColumnName("coach_id");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid")
                        .HasColumnName("sport_id");

                    b.HasKey("CoachId", "SportId")
                        .HasName("coach_sport_pkey");

                    b.HasIndex("SportId");

                    b.ToTable("coach_sport", (string)null);
                });

            modelBuilder.Entity("Domain.Persistence.Models.CoachCertification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CertName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cert_name");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid")
                        .HasColumnName("coach_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("ExpiresOn")
                        .HasColumnType("date")
                        .HasColumnName("expires_on");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<DateOnly?>("IssuedOn")
                        .HasColumnType("date")
                        .HasColumnName("issued_on");

                    b.Property<string>("Issuer")
                        .HasColumnType("text")
                        .HasColumnName("issuer");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("reviewed_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'active'::text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("coach_certification_pkey");

                    b.HasIndex("CoachId");

                    b.ToTable("coach_certification", (string)null);
                });

            modelBuilder.Entity("Domain.Persistence.Models.CoachMedium", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid")
                        .HasColumnName("coach_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<string>("MediaName")
                        .HasColumnType("text")
                        .HasColumnName("media_name");

                    b.Property<CoachMediaType>("MediaType")
                        .HasColumnType("media_type_enum")
                        .HasColumnName("media_type");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("coach_media_pkey");

                    b.HasIndex("CoachId");

                    b.ToTable("coach_media", (string)null);
                });

            modelBuilder.Entity("Domain.Persistence.Models.CoachProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url")
                        .HasComment("URL ảnh đại diện của huấn luyện viên");

                    b.Property<long?>("BasePriceVnd")
                        .HasColumnType("bigint")
                        .HasColumnName("base_price_vnd");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date")
                        .HasComment("Ngày sinh (DATE)");

                    b.Property<string>("CitizenId")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("citizen_id")
                        .HasComment("CCCD/CMND (9 hoặc 12 chữ số)");

                    b.Property<DateOnly?>("CitizenIssueDate")
                        .HasColumnType("date")
                        .HasColumnName("citizen_issue_date")
                        .HasComment("Ngày cấp CCCD/CMND");

                    b.Property<string>("CitizenIssuePlace")
                        .HasColumnType("text")
                        .HasColumnName("citizen_issue_place")
                        .HasComment("Nơi cấp CCCD/CMND");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Fullname")
                        .HasColumnType("text")
                        .HasColumnName("fullname")
                        .HasComment("Họ và tên");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender")
                        .HasComment("Giới tính: male/female/other/unspecified");

                    b.Property<decimal?>("HeightCm")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("height_cm")
                        .HasComment("Chiều cao (cm), 0–300");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_public");

                    b.Property<string>("KycNote")
                        .HasColumnType("text")
                        .HasColumnName("kyc_note");

                    b.Property<KycStatus>("KycStatus")
                        .HasColumnType("kyc_status_enum");

                    b.Property<string>("OperatingLocation")
                        .HasColumnType("text")
                        .HasColumnName("operating_location")
                        .HasComment("Khu vực/Nơi hoạt động chính");

                    b.Property<decimal?>("RatingAvg")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("rating_avg")
                        .HasDefaultValueSql("0.00");

                    b.Property<int>("RatingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("rating_count");

                    b.Property<decimal?>("ServiceRadiusKm")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("service_radius_km")
                        .HasDefaultValueSql("10.0");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tax_code")
                        .HasComment("Mã số thuế (10 hoặc 13 chữ số)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("WeightKg")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("weight_kg")
                        .HasComment("Cân nặng (kg), 0–500");

                    b.Property<int?>("YearsExperience")
                        .HasColumnType("integer")
                        .HasColumnName("years_experience");

                    b.HasKey("UserId")
                        .HasName("coach_profile_pkey");

                    b.HasIndex(new[] { "RatingAvg", "RatingCount" }, "idx_coach_profile_rating")
                        .IsDescending();

                    b.HasIndex(new[] { "CitizenId" }, "uq_coach_profile_citizen_id")
                        .IsUnique()
                        .HasFilter("(citizen_id IS NOT NULL)");

                    b.HasIndex(new[] { "TaxCode" }, "uq_coach_profile_tax_code")
                        .IsUnique()
                        .HasFilter("(tax_code IS NOT NULL)");

                    b.ToTable("coach_profile", (string)null);
                });

            modelBuilder.Entity("Domain.Persistence.Models.CoachService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid")
                        .HasColumnName("coach_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LocationNote")
                        .HasColumnType("text")
                        .HasColumnName("location_note");

                    b.Property<bool>("OnlineAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("online_available");

                    b.Property<bool>("OnsiteAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("onsite_available");

                    b.Property<long>("PriceVnd")
                        .HasColumnType("bigint")
                        .HasColumnName("price_vnd");

                    b.Property<int>("SessionsTotal")
                        .HasColumnType("integer")
                        .HasColumnName("sessions_total");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid")
                        .HasColumnName("sport_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("coach_service_pkey");

                    b.HasIndex(new[] { "CoachId" }, "idx_coach_service_coach");

                    b.HasIndex(new[] { "SportId" }, "idx_coach_service_sport");

                    b.ToTable("coach_service", (string)null);
                });

            modelBuilder.Entity("Domain.Persistence.Models.KycRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AdminNote")
                        .HasColumnType("text")
                        .HasColumnName("admin_note");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid")
                        .HasColumnName("coach_id");

                    b.Property<string>("IdDocumentUrl")
                        .HasColumnType("text")
                        .HasColumnName("id_document_url");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<Guid?>("ReviewerId")
                        .HasColumnType("uuid")
                        .HasColumnName("reviewer_id");

                    b.Property<KycStatus>("Status")
                        .HasColumnType("kyc_status_enum")
                        .HasColumnName("status");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("kyc_record_pkey");

                    b.HasIndex(new[] { "CoachId" }, "idx_kyc_coach");

                    b.ToTable("kyc_record", (string)null);
                });

            modelBuilder.Entity("Domain.Persistence.Models.Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.HasKey("Id")
                        .HasName("sport_pkey");

                    b.HasIndex(new[] { "Id" }, "ux_sport_id_new")
                        .IsUnique();

                    b.ToTable("sport", (string)null);
                });

            modelBuilder.Entity("CoachSport", b =>
                {
                    b.HasOne("Domain.Persistence.Models.CoachProfile", null)
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coach_sport_profile");

                    b.HasOne("Domain.Persistence.Models.Sport", null)
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("coach_sport_sport_id_fkey");
                });

            modelBuilder.Entity("Domain.Persistence.Models.CoachCertification", b =>
                {
                    b.HasOne("Domain.Persistence.Models.CoachProfile", "Coach")
                        .WithMany("CoachCertifications")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coach_cert_profile");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Domain.Persistence.Models.CoachMedium", b =>
                {
                    b.HasOne("Domain.Persistence.Models.CoachProfile", "Coach")
                        .WithMany("CoachMedia")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coach_media_profile");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Domain.Persistence.Models.CoachService", b =>
                {
                    b.HasOne("Domain.Persistence.Models.CoachProfile", "Coach")
                        .WithMany("CoachServices")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coach_service_profile");

                    b.HasOne("Domain.Persistence.Models.Sport", "Sport")
                        .WithMany("CoachServices")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("coach_service_sport_id_fkey");

                    b.Navigation("Coach");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Domain.Persistence.Models.KycRecord", b =>
                {
                    b.HasOne("Domain.Persistence.Models.CoachProfile", "Coach")
                        .WithMany("KycRecords")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_kyc_record_profile");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("Domain.Persistence.Models.CoachProfile", b =>
                {
                    b.Navigation("CoachCertifications");

                    b.Navigation("CoachMedia");

                    b.Navigation("CoachServices");

                    b.Navigation("KycRecords");
                });

            modelBuilder.Entity("Domain.Persistence.Models.Sport", b =>
                {
                    b.Navigation("CoachServices");
                });
#pragma warning restore 612, 618
        }
    }
}
